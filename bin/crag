#!/usr/bin/env raku

use lib '../lib';
use App::Crag;

sub MAIN(
    Str  $cmd?,
    Bool :$help = False,
    ) {
    if $help | ! $cmd {
        say q:to/END/;
            Usage:
                ./crag [--help] <cmd>
            Examples:
                [1] > crag 'say (1.6km / (60 * 60 * 1s)).in: <mph>'               #0.99mph
                [2] > crag '$m=95kg; $a=^<9.81 m/s^2>; $f=$m*$a; say $f'          #931.95N
                [3] > crag 'say ^<12.5 ft ±3%> .in: <mm>'                         #3810mm ±114.3
                [4] > crag '$λ=2.5nm; $ν=c/$λ; say $ν.norm'                       #119.91PHz
                [5] > crag '$c=:<37 °C>; $f=:<98.6 °F>; say $f cmp $c'            #Same
                [6] > crag 'say @physics-constants-symbols.join: "\n"'            # ...
            More info:
                - https://github.com/librasteve/raku-Physics-Measure.git
                - https://github.com/librasteve/raku-Physics-Unit.git
                - https://github.com/librasteve/raku-Physics-Error.git
                - https://github.com/librasteve/raku-Physics-Constants.git
                - https://github.com/raku-community-modules/Slang-Roman
                - https://github.com/antononcube/Raku-Chemistry-Stoichiometry
            - crag goes subst( ':<' => '♎️<' )
            - crag goes sub r( $x = 0.01 ) { $Physics::Measure::round-val = $x }
            - crag goes ```subst( '§|(.+?)|' => 'Q|$0|.AST.EVAL' )```
            - echo RAKULANG='en_US' for us gallons, pints, mpg, etc.
            END
    } else {
        eval-me($cmd);
    }
}
